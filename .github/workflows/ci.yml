name: CI and Release Pipeline

on:
  pull_request:
    branches:
      - main  # Run CI on pull requests to main
  push:
    tags:
      - 'v*'  # Trigger the release workflow on version tags (e.g., v1.0.0)
  workflow_dispatch:  # Enable manual trigger for the entire workflow

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: eclipse-temurin:22-jdk-alpine  # Lightweight JDK image

    steps:
      # Step 1: Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Cache Gradle dependencies (optional)
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 3: Build and run tests
      - name: Build and Run Unit Tests
        run: ./gradlew test --no-daemon

  release:
    runs-on: ubuntu-latest
    container:
      image: eclipse-temurin:22-jdk-alpine
    needs: test  # Ensure tests pass before running the release job
    if: ${{ github.event_name == 'workflow_dispatch' || github.ref_type == 'tag' }}  # Allow manual trigger or tag push

    steps:
      # Step 1: Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Build the JAR file
      - name: Build JAR
        run: ./gradlew clean build --no-daemon

      # Step 3: Upload JAR to GitHub Release
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: build/libs/*.jar  # Adjust this path to match your JAR output
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
